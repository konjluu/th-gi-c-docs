Viết chương trình nhận diện hành động bạo lực và không bạo lực qua từng frame video bằng LSTM và CNN, có thể làm như sau:

1.Chuẩn bị dữ liệu:
-Tải tập dữ liệu hành động bạo lực và không bạo lực từ các nguồn có sẵn như KTH Action Dataset hoặc UCF101 Action Recognition Data.
-Chia tập dữ liệu thành hai phần: tập huấn luyện và tập kiểm thử.
-Tách các frame của các video trong tập dữ liệu thành các ảnh riêng biệt.
-Chuyển các frame thành dữ liệu đầu vào cho mô hình: có thể sử dụng các phép biến đổi hình ảnh như chuyển đổi sang màu xám 
hoặc làm mờ ảnh để giảm độ phức tạp của dữ liệu.


2.Xây dựng mô hình LSTM và CNN:
-Sử dụng mô hình LSTM để xử lý dữ liệu liên tục trong từng frame. Mô hình LSTM sẽ học các quan hệ giữa các frame trong từng video 
và dự đoán nhãn cho từng frame dựa trên các frame trước đó.
-Sử dụng mô hình CNN để phân tích đặc trưng hình ảnh trong từng frame. 

-Để xây dựng mô hình LSTM và CNN, có thể sử dụng các thư viện deep learning như TensorFlow hoặc PyTorch. Các bước cụ thể như sau:
a,Khai báo các thư viện cần thiết và tải dữ liệu:

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, LSTM, Conv2D, Flatten, Dropout
from tensorflow.keras.models import Sequential

# Tải dữ liệu huấn luyện và kiểm thử
train_data_dir = 'path/to/train/data'
test_data_dir = 'path/to/test/data'

# Chuyển dữ liệu thành dữ liệu đầu vào cho mô hình
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary')

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary')


b,Xây dựng mô hình LSTM và CNN:
# Khởi tạo mô hình
model = Sequential()

# Thêm lớp LSTM đầu tiên vào mô hình
model.add(LSTM(64, input_shape=(None, 150, 150, 3)))

# Thêm các lớp CNN vào mô hình
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.

Để tiếp tục xây dựng mô hình LSTM và CNN,  có thể làm như sau:
model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(512, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


3.Huấn luyện mô hình:
history = model.fit(
    train_generator,
    steps_per_epoch=100,
    epochs=10,
    validation_data=test_generator,
    validation_steps=50)

4.Đánh giá mô hình:
test_loss, test_acc = model.evaluate(test_generator, steps=50)
print('Test loss:', test_loss)
print('Test accuracy:', test_acc)

Để có thể sử dụng mô hình để dự đoán nhãn cho từng frame trong một video, có thể sử dụng hàm predict của mô hình 
và truyền vào các frame của video làm đầu vào.

5.Xây dựng giao diện cho mô hình nhận diện hành động bạo lực và không bạo lực qua từng frame video bằng LSTM và CNN, 
có thể sử dụng các thư viện đồ họa như PyQt5 hoặc Tkinter. Các bước cụ thể như sau:

a,Cài đặt thư viện PyQt5 hoặc Tkinter:
Để sử dụng các widget của PyQt5 hoặc Tkinter,   cần cài đặt các thư viện này trước.   có thể sử dụng lệnh sau để cài đặt PyQt5:
pip install PyQt5

Để cài đặt Tkinter,sử dụng lệnh sau: pip install tkinter


b,.Khai báo các thành phần cần thiết cho giao diện:
Sau khi cài đặt xong các thư viện đồ họa,   có thể khai báo các widget cần thiết cho giao diện như label, button, vv. Ví dụ với PyQt5:

from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import QFileDialog, QMessageBox

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        # Tạo các widget cần thiết cho giao diện
        self.label = QtWidgets.QLabel()
        self.browse_button = QtWidgets.QPushButton()
        self.predict_button = QtWidgets.QPushButton()
        self.result_label = QtWidgets.QLabel()

Với Tkinter, có thể khai báo các widget như sau:
import tkinter as tk
from tkinter import filedialog, messagebox

class MainWindow(tk.Tk):
    def __init__(self):
        super().__init__()

        # Tạo các widget cần thiết cho giao diện
        self.label = tk.Label()
        self.browse_button = tk.Button()
        self.predict_button = tk.Button()
        self.result_label = tk.Label()


c.Thiết lập các thuộc tính của widget:
Sau khi khai báo các widget,   có thể thiết lập các thuộc tính của chúng như text, font, kích thước, vv. Ví dụ với PyQt5:

self.label.setText('Chọn video để dự đoán:')
self.browse_button.setText('Chọn')
self.predict_button.setText('Dự đoán')
self.result_label.setText('Kết quả:')

font = QtGui.QFont()
font.setPointSize(14)
self.label.setFont(font)
self.browse_button.setFont(font)
self.predict_button.setFont(font)
self.result_label.setFont(font)

self.browse_button.setFixedSize(100, 50)
self.predict_button.setFixedSize(100, 50)

Với Tkinter, có thể thiết lập các thuộc tính của widget như sau:

self.label.config(text='Chọn video để dự đoán:', font=('Arial', 14))
self.browse_button.config(text='Chọn', font=('Arial', 14), width=10, height=2)
self.predict_button.config(text='Dự đoán', font=('Arial', 14), width=10, height=2)
self.result_label.config(text='Kết quả:', font=('Arial', 14))

d,Sắp xếp các widget trên giao diện:
Sau khi thiết lập xong các thuộc tính của các widget, có thể sắp xếp chúng trên giao diện bằng cách sử dụng layout. 
Ví dụ với PyQt5,   có thể sử dụng QVBoxLayout để sắp xếp các widget theo chiều dọc:

layout = QtWidgets.QVBoxLayout()
layout.addWidget(self.label)
layout.addWidget(self.browse_button)
layout.addWidget(self.predict_button)
layout.addWidget(self.result_label)

# Tạo widget chứa layout và thiết lập nó là widget chính của cửa sổ
container = QtWidgets.QWidget()
container.setLayout(layout)
self.setCentralWidget(container)

Với Tkinter, có thể sử dụng các widget như Frame hoặc PanedWindow để sắp xếp các widget khác trên giao diện:

container = tk.Frame(self)

self.label.pack(side='top')
self.browse_button.pack(side='left')
self.predict_button.pack(side='right')
self.result_label.pack(side='bottom')

container.pack()

e.Thiết lập hành vi cho các nút:
Sau khi sắp xếp xong các widget trên giao diện, có thể thiết lập hành vi cho các nút như chọn file, dự đoán hành động bạo lực hay không bạo lực. 
Ví dụ với PyQt5, có thể sử dụng hàm QFileDialog.getOpenFileName() để mở hộp thoại chọn file và hàm QMessageBox.information() 
để hiển thị kết quả dự đoán:

self.browse_button.clicked.connect(self.browse_file)
self.predict_button.clicked.connect(self.predict)

def browse_file(self):
    options = QFileDialog.Options()
    options |= QFileDialog.ReadOnly
    file_name, _ = QFileDialog.getOpenFileName(self, 'Chọn video', '', 'Video Files (*.mp4 *.avi)', options=options)
    if file_name:
        # Lưu tên file vào biến toàn cục
        global file
        file = file_name

def predict(self):
    # Sử dụng mô hình để dự đoán hành động bạo lực hay không bạo lực
    result = model.predict(file)
    if result == 1:
        result_text = 'Bạo lực'
    else:
        result_text = 'Không bạo lực'
    QMessageBox.information(self, 'Kế


f,Khởi chạy giao diện:
Sau khi hoàn thành các bước trên, có thể khởi chạy giao diện bằng cách gọi hàm show() của widget chính. Ví dụ với PyQt5:
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

Với Tkinter,   có thể khởi chạy giao diện bằng cách gọi hàm mainloop():
if __name__ == '__main__':
    window = MainWindow()
    window.mainloop()


Có thể thêm các tính năng khác như hiển thị video, biểu đồ, vv.
